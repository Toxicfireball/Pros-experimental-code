
//Note: PROS is experiencing download issues and issues with Leron;s mac. Cannot download without errors. PROGRAM CANNOT RUN as of 5/6/2019
// Note: My juniors (Malcom and Angerina) have figurred out the downloading issues Too bad I step down alr :(. They will be using PROS is 2020 Nationals. As of December 2019.
#include "main.h"
// * Runs the operator control code. This function will be started in its own task
// * with the default priority and stack size whenever the robot is enabled via
 //* the Field Management System or the VEX Competition Switch in the operator
// * control mode.
// *
 //* If no competition control is connected, this function will run immediately
 //* following initialize().
// *
// * If the robot is disabled or communications is lost, the
// * operator control task will be stopped. Re-enabling the robot will restart the
// * task, not resume it from where it left off.
 #define LEFT_WHEELS_PORT 1
 #define RIGHT_WHEELS_PORT 10
 #define ARM_PORT 8
 #define CLAW_PORT 3
 #define QUADENCODER 3
#define QUADENCODER2 4
 #define ARM_LIMIT_SWITCH_PORT 'h'
 pros::Motor leftmotor (LEFT_WHEELS_PORT);
 pros::Motor rightmotor (RIGHT_WHEELS_PORT, true);
 pros::ADIEncoder encoder (QUADENCODER, QUADENCODER, false);
  pros::ADIEncoder encoder2 (QUADENCODER, QUADENCODER, false);

 void movebase(int speed)
 {
	 leftmotor.move_velocity(speed);
	 rightmotor.move_velocity(speed);
 }
 void turnleft(int speed)
 {
	leftmotor.move_velocity(-speed);
	rightmotor.move_velocity(-speed);
 }
 void advencoderturnleftmk2(int turn,int slwspd,int speed)
 {
	 int value1=encoder.get_value();
	 int value2=encoder2.get_value();
	 int Tvalue=encoder.get_value()+encoder2.get_value();
	 int total=Tvalue/2;
	 while(total>-turn)
	 {
		 turnleft(speed);
		 value1=encoder.get_value();
		 value2=encoder2.get_value();
		 Tvalue=encoder.get_value()+encoder2.get_value();
		 total=Tvalue/2;
	 }
	 while(value1>value2)
	 {
		 leftmotor.move_velocity(speed);
		 value1=encoder.get_value();
		 value2=encoder2.get_value();
		 Tvalue=encoder.get_value()+encoder2.get_value();
		 total=Tvalue/2;
	 }
	 while(value2>value1)
	 {
    rightmotor.move_velocity(speed);
		value1=encoder.get_value();
		value2=encoder2.get_value();
		Tvalue=encoder.get_value()+encoder2.get_value();
		total=Tvalue/2;

	 }
	 while(turn>-total)
	 {
		 turnleft(-slwspd);
	 }
	 if(turn>total-5&&turn<total+5)
	 {
		 value1=encoder.get_value();
		 value2=encoder2.get_value();
		 Tvalue=encoder.get_value()+encoder2.get_value();
		 total=Tvalue/2;
		 movebase(0);
		 pros::c::delay(100);
	 }
 }
void fwd(int dist,int speed)
{
	int value=encoder.get_value()-encoder2.get_value();
	int x=value/2;
	while(x<dist)
	{
		movebase(speed);
	}
}
void advfwd(int dist,int slwspd,int speed)
{
	int value=dist-encoder.get_value()-encoder2.get_value();
	int Evalue=value/2;
	int error=dist-Evalue;
	while(error>0&&error>dist/7)
	{
		movebase(speed);
		int error=dist-encoder.get_value();
	}
	while(error>0&&error<dist/7)
	{
		movebase(slwspd);
		int error=dist-encoder.get_value();
	}
	while(error<0)
	{
		movebase(-slwspd);
		int error=dist-encoder.get_value();
	}
	movebase(0);
}
void encoderturnleft(int left,int speed)
{

}
 void opcontrol() {

   pros::Motor arm (ARM_PORT, MOTOR_GEARSET_36); // The arm motor has the 100rpm (red) gearset
   pros::Motor claw (CLAW_PORT, MOTOR_GEARSET_36);


   pros::ADIDigitalIn arm_limit (ARM_LIMIT_SWITCH_PORT);

   pros::Controller master (CONTROLLER_MASTER);

   while (true) {
     int power = master.get_analog(ANALOG_LEFT_Y);
     int turn = master.get_analog(ANALOG_RIGHT_X);
     int left = power + turn;
     int right = power - turn;


     leftmotor.move(left);
     rightmotor.move(right);

     if (master.get_digital(DIGITAL_R1)) {
       arm.move_velocity(100); // This is 100 because it's a 100rpm motor
     }
     else if (master.get_digital(DIGITAL_R2) && !arm_limit.get_value()) {
       arm.move_velocity(-100);
     }
     else {
       arm.move_velocity(0);
     }

     if (master.get_digital(DIGITAL_L1)) {
       claw.move_velocity(100);
     }
     else if (master.get_digital(DIGITAL_L2)) {
       claw.move_velocity(-100);
     }
     else {
       claw.move_velocity(0);
     }

     pros::delay(2);
   }
 }
